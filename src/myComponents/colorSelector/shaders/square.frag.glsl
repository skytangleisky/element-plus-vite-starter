precision highp float;
float toWeb(float v) {
  return floor(v*5.0+0.5)*0.2;
}
vec3 toHTML(float r, float g, float b) {
  vec3 colors[138];
  colors[0] = vec3(0.09803921568627451,0.09803921568627451,0.4392156862745098);
  colors[1] = vec3(0.4117647058823529,0.4117647058823529,0.4117647058823529);
  colors[2] = vec3(0.4392156862745098,0.5019607843137255,0.5647058823529412);
  colors[3] = vec3(0.4666666666666667,0.5333333333333333,0.6);
  colors[4] = vec3(0.5019607843137255,0.0,0.0);
  colors[5] = vec3(0.5019607843137255,0.0,0.5019607843137255);
  colors[6] = vec3(0.5019607843137255,0.5019607843137255,0.0);
  colors[7] = vec3(0.5019607843137255,0.5019607843137255,0.5019607843137255);
  colors[8] = vec3(0.803921568627451,0.3607843137254902,0.3607843137254902);
  colors[9] = vec3(0.9411764705882353,0.5019607843137255,0.5019607843137255);
  colors[10] = vec3(0.9803921568627451,0.5019607843137255,0.4470588235294118);
  colors[11] = vec3(0.9137254901960784,0.5882352941176471,0.47843137254901963);
  colors[12] = vec3(1.0,0.6274509803921569,0.47843137254901963);
  colors[13] = vec3(0.8627450980392157,0.0784313725490196,0.23529411764705882);
  colors[14] = vec3(1.0,0.0,0.0);
  colors[15] = vec3(0.6980392156862745,0.13333333333333333,0.13333333333333333);
  colors[16] = vec3(0.5450980392156862,0.0,0.0);
  colors[17] = vec3(1.0,0.7529411764705882,0.796078431372549);
  colors[18] = vec3(1.0,0.7137254901960784,0.7568627450980392);
  colors[19] = vec3(1.0,0.4117647058823529,0.7058823529411765);
  colors[20] = vec3(1.0,0.0784313725490196,0.5764705882352941);
  colors[21] = vec3(0.7803921568627451,0.08235294117647059,0.5215686274509804);
  colors[22] = vec3(0.8588235294117647,0.4392156862745098,0.5764705882352941);
  colors[23] = vec3(1.0,0.4980392156862745,0.3137254901960784);
  colors[24] = vec3(1.0,0.38823529411764707,0.2784313725490196);
  colors[25] = vec3(1.0,0.27058823529411763,0.0);
  colors[26] = vec3(1.0,0.5490196078431373,0.0);
  colors[27] = vec3(1.0,0.6470588235294118,0.0);
  colors[28] = vec3(1.0,0.8431372549019608,0.0);
  colors[29] = vec3(1.0,1.0,0.0);
  colors[30] = vec3(1.0,1.0,0.8784313725490196);
  colors[31] = vec3(1.0,0.9803921568627451,0.803921568627451);
  colors[32] = vec3(0.9803921568627451,0.9803921568627451,0.8235294117647058);
  colors[33] = vec3(1.0,0.9372549019607843,0.8352941176470589);
  colors[34] = vec3(1.0,0.8941176470588236,0.7098039215686275);
  colors[35] = vec3(1.0,0.8549019607843137,0.7254901960784313);
  colors[36] = vec3(0.9333333333333333,0.9098039215686274,0.6666666666666666);
  colors[37] = vec3(0.9411764705882353,0.9019607843137255,0.5490196078431373);
  colors[38] = vec3(0.7411764705882353,0.7176470588235294,0.4196078431372549);
  colors[39] = vec3(0.9019607843137255,0.9019607843137255,0.9803921568627451);
  colors[40] = vec3(0.8470588235294118,0.7490196078431373,0.8470588235294118);
  colors[41] = vec3(0.8666666666666667,0.6274509803921569,0.8666666666666667);
  colors[42] = vec3(0.9333333333333333,0.5098039215686274,0.9333333333333333);
  colors[43] = vec3(0.8549019607843137,0.4392156862745098,0.8392156862745098);
  colors[44] = vec3(1.0,0.0,1.0);
  colors[45] = vec3(0.7294117647058823,0.3333333333333333,0.8274509803921568);
  colors[46] = vec3(0.5764705882352941,0.4392156862745098,0.8588235294117647);
  colors[47] = vec3(0.5411764705882353,0.16862745098039217,0.8862745098039215);
  colors[48] = vec3(0.5803921568627451,0.0,0.8274509803921568);
  colors[49] = vec3(0.6,0.19607843137254902,0.8);
  colors[50] = vec3(0.5450980392156862,0.0,0.5450980392156862);
  colors[51] = vec3(0.29411764705882354,0.0,0.5098039215686274);
  colors[52] = vec3(0.41568627450980394,0.35294117647058826,0.803921568627451);
  colors[53] = vec3(0.2823529411764706,0.23921568627450981,0.5450980392156862);
  colors[54] = vec3(0.4823529411764706,0.40784313725490196,0.9333333333333333);
  colors[55] = vec3(0.6784313725490196,1.0,0.1843137254901961);
  colors[56] = vec3(0.4980392156862745,1.0,0.0);
  colors[57] = vec3(0.48627450980392156,0.9882352941176471,0.0);
  colors[58] = vec3(0.0,1.0,0.0);
  colors[59] = vec3(0.19607843137254902,0.803921568627451,0.19607843137254902);
  colors[60] = vec3(0.596078431372549,0.984313725490196,0.596078431372549);
  colors[61] = vec3(0.5647058823529412,0.9333333333333333,0.5647058823529412);
  colors[62] = vec3(0.0,0.9803921568627451,0.6039215686274509);
  colors[63] = vec3(0.0,1.0,0.4980392156862745);
  colors[64] = vec3(0.23529411764705882,0.7019607843137254,0.44313725490196076);
  colors[65] = vec3(0.1803921568627451,0.5450980392156862,0.3411764705882353);
  colors[66] = vec3(0.13333333333333333,0.5450980392156862,0.13333333333333333);
  colors[67] = vec3(0.0,0.5019607843137255,0.0);
  colors[68] = vec3(0.0,0.39215686274509803,0.0);
  colors[69] = vec3(0.6039215686274509,0.803921568627451,0.19607843137254902);
  colors[70] = vec3(0.4196078431372549,0.5568627450980392,0.13725490196078433);
  colors[71] = vec3(0.3333333333333333,0.4196078431372549,0.1843137254901961);
  colors[72] = vec3(0.4,0.803921568627451,0.6666666666666666);
  colors[73] = vec3(0.5607843137254902,0.7372549019607844,0.5607843137254902);
  colors[74] = vec3(0.12549019607843137,0.6980392156862745,0.6666666666666666);
  colors[75] = vec3(0.0,0.5450980392156862,0.5450980392156862);
  colors[76] = vec3(0.0,0.5019607843137255,0.5019607843137255);
  colors[77] = vec3(0.0,1.0,1.0);
  colors[78] = vec3(0.8784313725490196,1.0,1.0);
  colors[79] = vec3(0.6862745098039216,0.9333333333333333,0.9333333333333333);
  colors[80] = vec3(0.4980392156862745,1.0,0.8313725490196079);
  colors[81] = vec3(0.25098039215686274,0.8784313725490196,0.8156862745098039);
  colors[82] = vec3(0.2823529411764706,0.8196078431372549,0.8);
  colors[83] = vec3(0.0,0.807843137254902,0.8196078431372549);
  colors[84] = vec3(0.37254901960784315,0.6196078431372549,0.6274509803921569);
  colors[85] = vec3(0.27450980392156865,0.5098039215686274,0.7058823529411765);
  colors[86] = vec3(0.6901960784313725,0.7686274509803922,0.8705882352941177);
  colors[87] = vec3(0.6901960784313725,0.8784313725490196,0.9019607843137255);
  colors[88] = vec3(0.6784313725490196,0.8470588235294118,0.9019607843137255);
  colors[89] = vec3(0.5294117647058824,0.807843137254902,0.9215686274509803);
  colors[90] = vec3(0.5294117647058824,0.807843137254902,0.9803921568627451);
  colors[91] = vec3(0.0,0.7490196078431373,1.0);
  colors[92] = vec3(0.11764705882352941,0.5647058823529412,1.0);
  colors[93] = vec3(0.39215686274509803,0.5843137254901961,0.9294117647058824);
  colors[94] = vec3(0.2549019607843137,0.4117647058823529,0.8823529411764706);
  colors[95] = vec3(0.0,0.0,1.0);
  colors[96] = vec3(0.0,0.0,0.803921568627451);
  colors[97] = vec3(0.0,0.0,0.5450980392156862);
  colors[98] = vec3(0.0,0.0,0.5019607843137255);
  colors[99] = vec3(1.0,0.9725490196078431,0.8627450980392157);
  colors[100] = vec3(1.0,0.9215686274509803,0.803921568627451);
  colors[101] = vec3(1.0,0.8941176470588236,0.7686274509803922);
  colors[102] = vec3(1.0,0.8705882352941177,0.6784313725490196);
  colors[103] = vec3(0.9607843137254902,0.8705882352941177,0.7019607843137254);
  colors[104] = vec3(0.8705882352941177,0.7215686274509804,0.5294117647058824);
  colors[105] = vec3(0.8235294117647058,0.7058823529411765,0.5490196078431373);
  colors[106] = vec3(0.7372549019607844,0.5607843137254902,0.5607843137254902);
  colors[107] = vec3(0.9568627450980393,0.6431372549019608,0.3764705882352941);
  colors[108] = vec3(0.8549019607843137,0.6470588235294118,0.12549019607843137);
  colors[109] = vec3(0.7215686274509804,0.5254901960784314,0.043137254901960784);
  colors[110] = vec3(0.803921568627451,0.5215686274509804,0.24705882352941178);
  colors[111] = vec3(0.8235294117647058,0.4117647058823529,0.11764705882352941);
  colors[112] = vec3(0.5450980392156862,0.27058823529411763,0.07450980392156863);
  colors[113] = vec3(0.6274509803921569,0.3215686274509804,0.17647058823529413);
  colors[114] = vec3(0.6470588235294118,0.16470588235294117,0.16470588235294117);
  colors[115] = vec3(1.0,1.0,1.0);
  colors[116] = vec3(1.0,0.9803921568627451,0.9803921568627451);
  colors[117] = vec3(0.9411764705882353,1.0,0.9411764705882353);
  colors[118] = vec3(0.9607843137254902,1.0,0.9803921568627451);
  colors[119] = vec3(0.9411764705882353,1.0,1.0);
  colors[120] = vec3(0.9411764705882353,0.9725490196078431,1.0);
  colors[121] = vec3(0.9725490196078431,0.9725490196078431,1.0);
  colors[122] = vec3(0.9607843137254902,0.9607843137254902,0.9607843137254902);
  colors[123] = vec3(1.0,0.9607843137254902,0.9333333333333333);
  colors[124] = vec3(0.9607843137254902,0.9607843137254902,0.8627450980392157);
  colors[125] = vec3(0.9921568627450981,0.9607843137254902,0.9019607843137255);
  colors[126] = vec3(1.0,0.9803921568627451,0.9411764705882353);
  colors[127] = vec3(1.0,1.0,0.9411764705882353);
  colors[128] = vec3(0.9803921568627451,0.9215686274509803,0.8431372549019608);
  colors[129] = vec3(0.9803921568627451,0.9411764705882353,0.9019607843137255);
  colors[130] = vec3(1.0,0.9411764705882353,0.9607843137254902);
  colors[131] = vec3(1.0,0.8941176470588236,0.8823529411764706);
  colors[132] = vec3(0.8627450980392157,0.8627450980392157,0.8627450980392157);
  colors[133] = vec3(0.8274509803921568,0.8274509803921568,0.8274509803921568);
  colors[134] = vec3(0.7529411764705882,0.7529411764705882,0.7529411764705882);
  colors[135] = vec3(0.6627450980392157,0.6627450980392157,0.6627450980392157);
  colors[136] = vec3(0.1843137254901961,0.30980392156862746,0.30980392156862746);
  colors[137] = vec3(0.0,0.0,0.0);
  float _min = 1.0 / 0.0;
  vec3 elt = vec3(0.0, 0.0, 0.0);
  for (int i = 0; i < 138; i++) {
    vec3 v = colors[i];
    float d = sqrt(pow(r - v.x, 2.0) + pow(g - v.y, 2.0) + pow(b - v.z, 2.0));
    if (d < _min) {
      _min = d;
      elt = v;
    }
  }
  return elt;
}

vec4 labToRgb(float y, float a, float B){
  float x = (a / 0.00392156863 - 128.0) / 500.0 + y,
  z = y - (B / 0.00392156863 - 128.0) / 200.0,
  r, g, b;

  x = 0.95047 * ((x * x * x > 0.008856) ? x * x * x : (x - 16.0/116.0) / 7.787);
  y = 1.00000 * ((y * y * y > 0.008856) ? y * y * y : (y - 16.0/116.0) / 7.787);
  z = 1.08883 * ((z * z * z > 0.008856) ? z * z * z : (z - 16.0/116.0) / 7.787);

  r = x *  3.2406 + y * -1.5372 + z * -0.4986;
  g = x * -0.9689 + y *  1.8758 + z *  0.0415;
  b = x *  0.0557 + y * -0.2040 + z *  1.0570;

  r = (r > 0.0031308) ? (1.055 * pow(r, 1.0/2.4) - 0.055) : 12.92 * r;
  g = (g > 0.0031308) ? (1.055 * pow(g, 1.0/2.4) - 0.055) : 12.92 * g;
  b = (b > 0.0031308) ? (1.055 * pow(b, 1.0/2.4) - 0.055) : 12.92 * b;

  return vec4(max(0.0, min(1.0, r)), max(0.0, min(1.0, g)), max(0.0, min(1.0, b)), 1.0);
}

vec4 hsvToRgb(float h, float s, float v) {
  float r, g, b;

  float i = floor(h * 6.0);
  float mi = mod(i, 6.0);
  float f = h * 6.0 - i;
  float p = v * (1.0 - s);
  float q = v * (1.0 - f * s);
  float t = v * (1.0 - (1.0 - f) * s);

  if (mi == 0.0) r = v, g = t, b = p;
  else if (mi == 1.0) r = q, g = v, b = p;
  else if (mi == 2.0) r = p, g = v, b = t;
  else if (mi == 3.0) r = p, g = q, b = v;
  else if (mi == 4.0) r = t, g = p, b = v;
  else if (mi == 5.0) r = v, g = p, b = q;

  return vec4(r, g, b, 1.0);
}

uniform float u_amount;
uniform int u_channel;
uniform int u_web;

/* the texCoords passed in from the vertex shader. */
varying vec2 v_texCoord;
void main() {
  vec4 color;
  if (u_channel == 8) {
    color = labToRgb(1.0-v_texCoord.y, v_texCoord.x, u_amount);
  } else if (u_channel == 7) {
    color = labToRgb(1.0-v_texCoord.y, u_amount, v_texCoord.x);
  } else if (u_channel == 6) {
    color = labToRgb(u_amount, v_texCoord.x, 1.0-v_texCoord.y);
  } else if (u_channel == 5) {
    color = hsvToRgb(v_texCoord.x, 1.0-v_texCoord.y, u_amount);
  } else if (u_channel == 4) {
    color = hsvToRgb(v_texCoord.x, u_amount, 1.0-v_texCoord.y);
  } else if (u_channel == 3) {
    color = hsvToRgb(u_amount, v_texCoord.x, 1.0-v_texCoord.y);
  } else if (u_channel == 2) {
    color = vec4(v_texCoord.x, 1.0 - v_texCoord.y, u_amount, 1.0);
  } else if (u_channel == 1) {
    color = vec4(1.0 - v_texCoord.y, u_amount, v_texCoord.x, 1.0);
  } else {
    color = vec4(u_amount, 1.0 - v_texCoord.y, v_texCoord.x, 1.0);
  }
  if (u_web == 1) {
    gl_FragColor.r = toWeb(color.r);
    gl_FragColor.g = toWeb(color.g);
    gl_FragColor.b = toWeb(color.b);
    gl_FragColor.a = color.a;
  } else if (u_web == 2) {
    vec3 v = toHTML(color.r, color.g, color.b);
    gl_FragColor.r = v.x;
    gl_FragColor.g = v.y;
    gl_FragColor.b = v.z;
    gl_FragColor.a = color.a;
  } else gl_FragColor = color;
}